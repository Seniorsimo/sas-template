@startuml system-architecture
!theme plain
title [Project Name] - System Architecture

' Definition of styles for the different layers
skinparam package {
    BackgroundColor<<frontend>> LightBlue
    BackgroundColor<<gateway>> LightYellow
    BackgroundColor<<services>> LightGreen
    BackgroundColor<<database>> LightPink
    BackgroundColor<<external>> Plum
    BackgroundColor<<infrastructure>> LightGoldenRodYellow
}

' Frontend Layer
package "Frontend Layer" <<frontend>> {
    component [Frontend Application] as FrontendApp
    component [User Interface] as UI
    component [State Management] as StateManagement
    
    FrontendApp -down-> UI
    FrontendApp -down-> StateManagement
}

' API Gateway / Entry Point
package "API Gateway" <<gateway>> {
    component [Request Routing] as Routing
    component [Authentication] as AuthGW
    component [Rate Limiting] as RateLimit
    
    Routing -down-> AuthGW
    Routing -down-> RateLimit
}

' Services Layer
package "Services Layer" <<services>> {
    component [Service A] as ServiceA
    component [Service B] as ServiceB
    component [Service C] as ServiceC
    
    ServiceA -[hidden]right-> ServiceB
    ServiceB -[hidden]right-> ServiceC
}

' Database Layer
package "Database Layer" <<database>> {
    database "Main Database" as MainDB
    database "Cache" as Cache
    database "File Storage" as FileStorage
    
    MainDB -[hidden]right-> Cache
    Cache -[hidden]right-> FileStorage
}

' External Services
package "External Services" <<external>> {
    component [External Service 1] as ExternalService1
    component [External Service 2] as ExternalService2
    component [External Service 3] as ExternalService3
    
    ExternalService1 -[hidden]down-> ExternalService2
    ExternalService2 -[hidden]down-> ExternalService3
}

' Infrastructure Components
package "Infrastructure" <<infrastructure>> {
    component [Load Balancer] as LoadBalancer
    component [Monitoring & Logging] as Monitoring
    component [Security Layer] as Security
    component [CI/CD Pipeline] as CICD
    
    LoadBalancer -[hidden]down-> Monitoring
    Monitoring -[hidden]right-> Security
    Security -[hidden]right-> CICD
}

' Main connections
FrontendApp -right-> Routing : HTTP/HTTPS
Routing -right-> ServiceA : API
Routing -right-> ServiceB : API
Routing -right-> ServiceC : API

' Database connections
ServiceA -down-> MainDB : [Connection type]
ServiceB -down-> MainDB : [Connection type]
ServiceC -down-> MainDB : [Connection type]

ServiceA -down-> Cache : [Connection type]
ServiceB -down-> Cache : [Connection type]
ServiceC -down-> Cache : [Connection type]

ServiceB -down-> FileStorage : [Connection type]

' External services connections
Routing -left-> ExternalService1 : API Calls
Routing -left-> ExternalService2 : API Calls
Routing -left-> ExternalService3 : API Calls

' Infrastructure connections
LoadBalancer -up-> ServiceA
LoadBalancer -up-> ServiceB
LoadBalancer -up-> ServiceC

' Notes to clarify the architecture
note right of FrontendApp
  [Description of the frontend application]
  [Technologies used]
  [Main responsibilities]
end note

note right of Routing
  [Description of the entry point]
  [Implemented features]
  [Security policies]
end note

note bottom of MainDB
  [Database type]
  [Main features]
  [Data model]
end note

note bottom of Cache
  [Caching system used]
  [Caching strategy]
  [Optimizations]
end note

@enduml
